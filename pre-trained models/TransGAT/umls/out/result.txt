
Current iteration time 1.2394397258758545
Stats for replacing head are -> 
Current iteration Hits@100 are 1.0
Current iteration Hits@10 are 0.9969742813918305
Current iteration Hits@3 are 0.9939485627836612
Current iteration Hits@1 are 0.9863842662632375
Current iteration Mean rank 1.0559757942511347
Current iteration Mean Reciprocal Rank 0.9908976298537572

Stats for replacing tail are -> 
Current iteration Hits@100 are 0.9984871406959153
Current iteration Hits@10 are 0.9954614220877458
Current iteration Hits@3 are 0.9939485627836612
Current iteration Hits@1 are 0.983358547655068
Current iteration Mean rank 1.2239031770045385
Current iteration Mean Reciprocal Rank 0.9884063774822565

Averaged stats for replacing head are -> 
Hits@100 are 1.0
Hits@10 are 0.9969742813918305
Hits@3 are 0.9939485627836612
Hits@1 are 0.9863842662632375
Mean rank 1.0559757942511347
Mean Reciprocal Rank 0.9908976298537572

Averaged stats for replacing tail are -> 
Hits@100 are 0.9984871406959153
Hits@10 are 0.9954614220877458
Hits@3 are 0.9939485627836612
Hits@1 are 0.983358547655068
Mean rank 1.2239031770045385
Mean Reciprocal Rank 0.9884063774822565

Cumulative stats are -> 
Hits@100 are 0.9992435703479576
Hits@10 are 0.9962178517397882
Hits@3 are 0.9939485627836612
Hits@1 are 0.9848714069591528
Mean rank 1.1399394856278366
Mean Reciprocal Rank 0.9896520036680068


def parse_args():
    args = argparse.ArgumentParser()
    # network arguments
    args.add_argument("-patience", "--patience",
                      default=2400, help="early stopping patience")
    args.add_argument("-data", "--data",
                      default="./data/umls/", help="data directory")
    args.add_argument("-e_g", "--epochs_gat", type=int,
                      default=3000, help="Number of epochs")
    args.add_argument("-e_c", "--epochs_conv", type=int,
                      default=400, help="Number of epochs")
    args.add_argument("-w_gat", "--weight_decay_gat", type=float,
                      default=1e-5, help="L2 reglarization for gat")
    args.add_argument("-w_conv", "--weight_decay_conv", type=float,
                      default=1e-5, help="L2 reglarization for conv")
    args.add_argument("-pre_emb", "--pretrained_emb", type=bool,
                      default=False, help="Use pretrained embeddings")
    args.add_argument("-emb_size", "--embedding_size", type=int,
                      default=200, help="Size of embeddings (if pretrained not used)")
    args.add_argument("-l", "--lr", type=float, default=1e-3)
    args.add_argument("-g2hop", "--get_2hop", type=bool, default=False)
    args.add_argument("-u2hop", "--use_2hop", type=bool, default=True)
    args.add_argument("-p2hop", "--partial_2hop", type=bool, default=False)
    args.add_argument("-outfolder", "--output_folder",
                      default="./checkpoints/umls/out/", help="Folder name to save the models.")

    # arguments for GAT
    args.add_argument("-b_gat", "--batch_size_gat", type=int,
                      default=5316, help="Batch size for GAT")  # 86835
    args.add_argument("-neg_s_gat", "--valid_invalid_ratio_gat", type=int,
                      default=2, help="Ratio of valid to invalid triples for GAT training")
    args.add_argument("-drop_GAT", "--drop_GAT", type=float,
                      default=0.3, help="Dropout probability for SpGAT layer")
    args.add_argument("-alpha", "--alpha", type=float,
                      default=0.2, help="LeakyRelu alphs for SpGAT layer")
    args.add_argument("-out_dim", "--entity_out_dim", type=int, nargs='+',
                      default=[100, 200], help="Entity output embedding dimensions")
    args.add_argument("-h_gat", "--nheads_GAT", type=int, nargs='+',
                      default=[2, 2], help="Multihead attention SpGAT")
    args.add_argument("-margin", "--margin", type=float,
                      default=3, help="Margin used in hinge loss")

    # arguments for convolution network
    args.add_argument("-b_conv", "--batch_size_conv", type=int,
                      default=128, help="Batch size for conv")
    args.add_argument("-alpha_conv", "--alpha_conv", type=float,
                      default=0.2, help="LeakyRelu alphas for conv layer")
    args.add_argument("-neg_s_conv", "--valid_invalid_ratio_conv", type=int, default=10,
                      help="Ratio of valid to invalid triples for convolution training")
    args.add_argument("-o", "--out_channels", type=int, default=50,
                      help="Number of output channels in conv layer")
    args.add_argument("-drop_conv", "--drop_conv", type=float,
                      default=0.3, help="Dropout probability for convolution layer")

    args = args.parse_args()
    return args